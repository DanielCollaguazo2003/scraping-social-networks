from transformers import pipeline
import torch

class AnalizadorTexto:
    def __init__(self):
        """
        Inicializa los modelos de clasificaci칩n y an치lisis de sentimientos,
        configurando el dispositivo autom치ticamente (GPU si est치 disponible).
        """
        device = 0 if torch.cuda.is_available() else -1

        self.clasificador = pipeline(
            "zero-shot-classification",
            model="facebook/bart-large-mnli",
            device=device
        )

        self.analizador_sentimientos = pipeline(
            "sentiment-analysis",
            model="nlptown/bert-base-multilingual-uncased-sentiment",
            device=device
        )

        self.categorias = [
            "Turismo",
            "Gastronom칤a",
            "Seguridad y Delincuencia",
            "Eventos",
            "Salud"
        ]
        
    

    def analizar_sentimiento(self, texto: str) -> dict:
        try:
            resultado = self.analizador_sentimientos(texto)
            if isinstance(resultado, list):
                resultado = resultado[0]

            label = resultado.get('label', '')
            score = resultado.get('score', 0.0)

            # 游리 Traduce "5 stars" a "positive", etc. (lo que espera tu modelo)
            if "star" in label.lower():
                rating = int(label[0])
                if rating >= 4:
                    simplified_label = "positive"
                    sentimiento = "Positivo"
                elif rating <= 2:
                    simplified_label = "negative"
                    sentimiento = "Negativo"
                else:
                    simplified_label = "neutral"
                    sentimiento = "Neutro"
            else:
                label_upper = label.upper()
                if "POSITIVE" in label_upper:
                    simplified_label = "positive"
                    sentimiento = "Positivo"
                elif "NEGATIVE" in label_upper:
                    simplified_label = "negative"
                    sentimiento = "Negativo"
                else:
                    simplified_label = "neutral"
                    sentimiento = "Neutro"

            return {
                "label": simplified_label,  # 丘멆잺 춰Ahora compatible con el Enum!
                "score": score,
                "confidence": round(score, 4),
                "sentimiento": sentimiento
            }

        except Exception as e:
            print(f"Error en an치lisis de sentimientos: {e}")
            return {
                "label": None,
                "score": 0.0,
                "confidence": 0.0,
                "sentimiento": "No determinado"
            }



    def clasificar_categoria(self, texto: str) -> dict:
        """
        Clasifica el texto en una de las categor칤as predefinidas.

        Args:
            texto (str): Texto a clasificar.

        Returns:
            dict: Diccionario con:
                - categoria_principal (str)
                - confianza (float)
                - todas_las_categorias (list de dicts con 'categoria' y 'puntuacion')
        """
        try:
            resultado = self.clasificador(texto, self.categorias)

            labels = resultado.get('labels', [])
            scores = resultado.get('scores', [])

            if not labels or not scores:
                raise ValueError("Resultado del clasificador vac칤o")

            return {
                "categoria_principal": labels[0],
                "confianza": round(scores[0], 4),
                "todas_las_categorias": [
                    {"categoria": lbl, "puntuacion": round(scr, 4)}
                    for lbl, scr in zip(labels, scores)
                ]
            }
        except Exception as e:
            print(f"Error en clasificaci칩n: {e}")
            return {
                "categoria_principal": "No determinada",
                "confianza": 0.0,
                "todas_las_categorias": []
            }

    def analizar_texto_completo(self, texto: str) -> dict:
        """
        Realiza an치lisis completo: sentimiento + categor칤a.

        Args:
            texto (str): Texto a analizar.

        Returns:
            dict: Resultado combinado con las claves:
                - texto
                - sentimiento (dict)
                - clasificacion (dict)
                - resumen (str)
        """
        if not texto or not isinstance(texto, str):
            return {
                "error": "El texto debe ser una cadena no vac칤a",
                "texto": texto
            }

        sentimiento = self.analizar_sentimiento(texto)
        clasificacion = self.clasificar_categoria(texto)

        resumen = (
            f"Texto clasificado como '{clasificacion.get('categoria_principal', 'No determinada')}' "
            f"con sentimiento '{sentimiento.get('sentimiento', 'No determinado')}' "
            f"(confianza: {clasificacion.get('confianza', 0.0)})"
        )

        return {
            "texto": texto,
            "sentimiento": sentimiento,
            "clasificacion": clasificacion,
            "resumen": resumen
        }


def analizar_texto(texto: str) -> dict:
    """
    Funci칩n auxiliar para an치lisis r치pido.

    Args:
        texto (str): Texto a analizar.

    Returns:
        dict: Resultado del an치lisis completo.
    """
    analizador = AnalizadorTexto()
    return analizador.analizar_texto_completo(texto)


if __name__ == "__main__":
    analizador = AnalizadorTexto()

    textos_ejemplo = [
        "El restaurante ten칤a una comida deliciosa y el servicio fue excelente",
        "Me robaron la cartera en el centro de la ciudad, muy inseguro",
        "El concierto de rock estuvo incre칤ble, la banda toc칩 genial",
        "El hospital tiene muy buena atenci칩n m칠dica y doctores capacitados",
        "Las playas de esta ciudad son hermosas, perfectas para vacacionar"
    ]

    print("=== AN츼LISIS DE TEXTOS ===\n")

    for i, texto in enumerate(textos_ejemplo, 1):
        print(f"Ejemplo {i}:")
        print(f"Texto: {texto}")

        resultado = analizador.analizar_texto_completo(texto)

        print(f"Categor칤a: {resultado['clasificacion']['categoria_principal']}")
        print(f"Sentimiento: {resultado['sentimiento']['sentimiento']}")
        print(f"Confianza categor칤a: {resultado['clasificacion']['confianza']}")
        print(f"Confianza sentimiento: {resultado['sentimiento']['confianza']}")
        print("-" * 50)

    print("\n=== USANDO FUNCI칍N INDEPENDIENTE ===")
    texto_prueba = "La nueva cafeter칤a tiene un ambiente acogedor pero los precios son muy altos"
    resultado = analizar_texto(texto_prueba)
    print(f"Texto: {resultado['texto']}")
    print(f"Resumen: {resultado['resumen']}")
